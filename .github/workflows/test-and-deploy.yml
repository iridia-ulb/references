name: CI

on:
  push:
    paths-ignore: ['README.md','bibpool/**','**precommit*','setup_worktree.sh','mklog','**.latexmkrc','.gitignore']

  pull_request:
    paths-ignore: ['README.md','bibpool/**','**precommit*','setup_worktree.sh','mklog','**.latexmkrc','.gitignore']

env:
  cache-version: v2

jobs:
  ci:
    if: "! contains(github.event.head_commit.message, '[skip ci]')"
    concurrency: ci-${{ github.ref }} # Recommended if you intend to make multiple deployments in quick succession.
    runs-on: ubuntu-latest
    steps:
      - run: echo "🎉 The job was automatically triggered by a ${{ github.event_name }} event."
      - run: echo "🐧 This job is now running on a ${{ runner.os }} server hosted by GitHub!"
      - run: echo "🔎 The name of your branch is ${{ github.ref }} and your repository is ${{ github.repository }}."
      - name: 📥 Check out repository
        uses: actions/checkout@v4

      - name: 💡 List files in the repository
        run: |
          ls -R ${{ github.workspace }}

      - name: 🔍 Analyse changes
        uses: dorny/paths-filter@v3
        id: filter
        with:
          filters: |
            bibcheck: [ 'crossref.bib', 'biblio.bib', './scripts/bibcheck.R', './github/**.yml' ]
            doicheck: [ 'articles.bib', 'biblio.bib', 'crossref.bib', './scripts/doi_check.R', './github/**.yml' ]
            linter: [ './*.bib', './scripts/linter', './github/**.yml' ]

      - name: 🧹 Linter
        if: ${{ steps.filter.outputs.linter == 'true' && github.event_name == 'push' }}
        run: |
          ./scripts/linter *.bib && exit 0
          git config --local user.name "github-actions[bot]"
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git add *.bib
          (git commit -m "Linter '.bib' files  [skip ci]" && git pull --rebase && git push origin) || echo "No changes to commit"

      - uses: r-lib/actions/setup-r@v2
        if: steps.filter.outputs.bibcheck == 'true' || steps.filter.outputs.doicheck == 'true'

      - uses: r-lib/actions/setup-r-dependencies@v2
        if: steps.filter.outputs.bibcheck == 'true'
        with:
          packages: cran::rbibutils
          dependencies: '"hard"'

      - uses: r-lib/actions/setup-r-dependencies@v2
        if: steps.filter.outputs.doicheck == 'true'
        with:
          packages: |
            cran::rbibutils
            cran::jsonlite
            cran::httr
          dependencies: '"hard"'

      - run: Rscript ./scripts/bibcheck.R
        if: steps.filter.outputs.bibcheck == 'true'

      - name: 🔍 Extract changed DOI entries
        if: steps.filter.outputs.doicheck == 'true'
        id: extract-dois
        run: |
          # Get the changed entries from modified bib files
          changed_entries=""
          
          # Check for pull request vs push
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            base_ref="${{ github.event.pull_request.base.sha }}"
          else
            base_ref="HEAD~1"
          fi
          
          echo "Comparing against base ref: $base_ref"
          
          # Extract DOI entries from changed lines in bib files
          for file in articles.bib biblio.bib crossref.bib; do
            if git diff --name-only $base_ref HEAD | grep -q "^$file$"; then
              echo "Processing changes in $file"
              
              # Get all entries that have DOI changes (added or modified DOI lines)
              # This creates a temp file with the diff and processes it
              git diff $base_ref HEAD -- "$file" > /tmp/diff_$file
              
              # Find entries where DOI field was added or modified
              grep -n "^[+-].*doi\s*=" /tmp/diff_$file | while IFS=: read linenum line; do
                # Get the entry key by looking backwards from the DOI line for the entry start
                entry_start=$(head -n $linenum /tmp/diff_$file | grep -n "^[+-]@[A-Za-z]*{" | tail -1)
                if [ -n "$entry_start" ]; then
                  entry_line=$(echo "$entry_start" | cut -d: -f2)
                  entry_key=$(echo "$entry_line" | sed 's/^[+-]@[A-Za-z]*{\([^,}]*\).*/\1/')
                  if [ -n "$entry_key" ]; then
                    echo "Found changed DOI in entry: $entry_key"
                    changed_entries="$changed_entries $entry_key"
                  fi
                fi
              done
              
              rm -f /tmp/diff_$file
            fi
          done
          
          # Remove duplicates and clean up
          changed_entries=$(echo "$changed_entries" | tr ' ' '\n' | sort -u | tr '\n' ' ' | xargs)
          echo "changed_entries=$changed_entries" >> $GITHUB_OUTPUT
          echo "Final changed DOI entries: $changed_entries"

      - run: |
          if [ -n "${{ steps.extract-dois.outputs.changed_entries }}" ]; then
            echo "Running DOI check for changed entries: ${{ steps.extract-dois.outputs.changed_entries }}"
            Rscript ./scripts/doi_check.R --changed-entries "${{ steps.extract-dois.outputs.changed_entries }}"
          else
            echo "No changed DOI entries detected, running full DOI check"
            Rscript ./scripts/doi_check.R
          fi
        if: steps.filter.outputs.doicheck == 'true'

      - name: 📊 Report results
        if: always() && (steps.filter.outputs.bibcheck == 'true' || steps.filter.outputs.doicheck == 'true')
        run: |
          if [ $? -eq 0 ]; then
            echo "✅ All bibliography and DOI checks passed!"
          else
            echo "❌ Bibliography or DOI validation failed - see above for details"
            exit 1
          fi

  test:
    name: BibTeX Testing ${{ matrix.main }}.tex ${{ matrix.style }}.bst
    needs: ci
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        main: ["testbib", "testshortbib"]
        style: ["../bibstyles/splncs04abbrev", "../bibstyles/abbrvnatamp"]
        include:
          - main: "testbiblatex"
            style: ""
          - main: "testbib"
            style: "testbib"
          - main: "testshortbib"
            style: "testshortbib"

    steps:
      - name: 📥 Check out repository
        uses: actions/checkout@v4

      # - name: 📋 Cache TinyTeX
      #   id: cache-tinytex
      #   uses: actions/cache@v4
      #   with:
      #     path: ~/.TinyTeX
      #     key: ${{ env.cache-version }}-${{ runner.os }}-tinytex-${{ hashFiles('.github/texlive_packages') }}
      #     restore-keys: |
      #       ${{ env.cache-version }}-${{ runner.os }}-tinytex-

      - name: 🔧 Setup TinyTeX
        uses: r-lib/actions/setup-tinytex@v2-branch
        #if: ${{ env.FILES_CHANGED != 0 }} #&& steps.cache-tinytex.outputs.cache-hit != 'true'}}
        env:
          TINYTEX_INSTALLER: TinyTeX-1
          TINYTEX_VERSION: 2023.12

      - name: 📦 Install LaTeX packages
        #if: ${{ env.FILES_CHANGED != 0 }} #&& steps.cache-tinytex.outputs.cache-hit != 'true'}}
        run: |
          texlive_packages=./.github/texlive_packages
          which tlmgr
          tlmgr --version
          echo "Updating TexLive"
          # Keep no backups (not required, simply makes cache bigger)
          tlmgr option repository https://ftp.math.utah.edu/pub/tex/historic/systems/texlive/2023/tlnet-final
          tlmgr option -- autobackup 0
          echo "Updating tlmgr itself"
          tlmgr update --self
          echo "Install ${texlive_packages}"
          tlmgr install $(sed 's/\s*#.*//;/^\s*$/d' "${texlive_packages}")
          tlmgr path add

      - name: 🧪 Run LaTeX tests
        run: |
          cd test && ./test.sh -single ${{ matrix.main }} ${{ matrix.style }}

      - name: 📦 Install system packages
        if: ${{ success() && (matrix.main == matrix.style) }}
        run: |
          sudo apt -y install ghostscript qpdf

      - name: 🗜️ Compress PDFs
        if: ${{ success() && (matrix.main == matrix.style) }}
        run: cd test && ./compress.sh ${{ matrix.main }}.pdf && mv --force -t ../web/ ${{ matrix.main }}.pdf

      - name: 📤 Upload build artifacts
        if: ${{ success() && (matrix.main == matrix.style) }}
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.main }}
          path: ./web/${{ matrix.main }}.pdf
          retention-days: 30

  deploy:
    name: Deploy to github pages
    needs: test
    concurrency: ci-${{ github.ref }} # Recommended if you intend to make multiple deployments in quick succession.
    runs-on: ubuntu-latest
    steps:
      - name: 📥 Check out repository
        uses: actions/checkout@v4

      - name: 📥 Download build artifacts
        uses: actions/download-artifact@v5
        with:
          pattern: test*bib*
          path: web
          merge-multiple: true

      - name: 📦 Install system packages
        run: |
          sudo apt -y install bibtex2html tidy

      - name: optbib2html
        run: ./scripts/optbib2html.sh

      - name: 🚀 Deploy
        if: ${{ success() && github.event_name == 'push' && (github.ref == 'refs/heads/master' || github.ref == 'refs/heads/main')  }}
        uses: JamesIves/github-pages-deploy-action@v4
        with:
          folder: web # The folder the action should deploy.
          clean: true
          single-commit: true

      - run: echo "🍏 This job's status is ${{ job.status }}."
